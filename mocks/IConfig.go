// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	config "github.com/felixlambertv/go-cleanplate/config"
	mock "github.com/stretchr/testify/mock"
)

// IConfig is an autogenerated mock type for the IConfig type
type IConfig struct {
	mock.Mock
}

// GetConfig provides a mock function with given fields:
func (_m *IConfig) GetConfig() *config.Config {
	ret := _m.Called()

	var r0 *config.Config
	if rf, ok := ret.Get(0).(func() *config.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Config)
		}
	}

	return r0
}

// GetDbConnectionUrl provides a mock function with given fields:
func (_m *IConfig) GetDbConnectionUrl() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewConfig provides a mock function with given fields:
func (_m *IConfig) NewConfig() (*config.Config, error) {
	ret := _m.Called()

	var r0 *config.Config
	var r1 error
	if rf, ok := ret.Get(0).(func() (*config.Config, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *config.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Config)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIConfig interface {
	mock.TestingT
	Cleanup(func())
}

// NewIConfig creates a new instance of IConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIConfig(t mockConstructorTestingTNewIConfig) *IConfig {
	mock := &IConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
