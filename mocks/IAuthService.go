// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	request "github.com/felixlambertv/go-cleanplate/internal/controller/request"
	model "github.com/felixlambertv/go-cleanplate/internal/model"
	mock "github.com/stretchr/testify/mock"

	utils "github.com/felixlambertv/go-cleanplate/pkg/utils"
)

// IAuthService is an autogenerated mock type for the IAuthService type
type IAuthService struct {
	mock.Mock
}

// EncryptPassword provides a mock function with given fields: password
func (_m *IAuthService) EncryptPassword(password string) (string, error) {
	ret := _m.Called(password)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: req
func (_m *IAuthService) Login(req request.LoginRequest) (*model.User, *utils.Token, error) {
	ret := _m.Called(req)

	var r0 *model.User
	var r1 *utils.Token
	var r2 error
	if rf, ok := ret.Get(0).(func(request.LoginRequest) (*model.User, *utils.Token, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(request.LoginRequest) *model.User); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(request.LoginRequest) *utils.Token); ok {
		r1 = rf(req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.Token)
		}
	}

	if rf, ok := ret.Get(2).(func(request.LoginRequest) error); ok {
		r2 = rf(req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewIAuthService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIAuthService creates a new instance of IAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIAuthService(t mockConstructorTestingTNewIAuthService) *IAuthService {
	mock := &IAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
